st_coordinates(st_centroid(lake_polys[1,]))
unname(st_coordinates(st_centroid(lake_polys[1,])))
as.numeric(st_coordinates(st_centroid(lake_polys[1,])))
center = as.numeric(st_coordinates(st_centroid(lake_polys[1,])))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
setView(lng = -94.6859, lat = 46.7296, zoom = 6) %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW))) %>%
# flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
flyTo(center[1], center[2])
center = as.numeric(st_coordinates(st_centroid(lake_polys[1,])))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
setView(lng = -94.6859, lat = 46.7296, zoom = 6) %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW))) %>%
# flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
flyTo(center[1], center[2], 6)
center = as.numeric(st_coordinates(st_centroid(lake_polys[1,])))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
setView(lng = -94.6859, lat = 46.7296, zoom = 6) %>%
addPolygons(data = lake_polys[1,]$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", lake_polys[1,]$map_label,
"<br>", "DOW: ", lake_polys[1,]$DOW))) %>%
# flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
flyTo(center[1], center[2], 6)
bounds = unname(st_bbox(lake_polys[1,]))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
fitBounds(lng1 = -97.239209, lat1 = 43.499356,
lng2 = -89.491694, lat2 = 49.384358) %>%
addPolygons(data = lake_polys[1,]$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", lake_polys[1,]$map_label,
"<br>", "DOW: ", lake_polys[1,]$DOW)))
bounds = unname(st_bbox(lake_polys[1,]))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
fitBounds(lng1 = -97.239209, lat1 = 43.499356,
lng2 = -89.491694, lat2 = 49.384358) %>%
addPolygons(data = lake_polys[1,]$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", lake_polys[1,]$map_label,
"<br>", "DOW: ", lake_polys[1,]$DOW))) %>%
flyToBounds(bounds[1], bounds[2],
bounds[3], bounds[4])
runApp()
most_recent_lake_choice() != "No selection"
input$fetch_lake_choice != "No selection"
input$fetch_lake_choice
most_recent_lake_choice() != input$fetch_lake_choice
runApp()
most_recent_lake_choice() != "No selection"
most_recent_lake_choice()
input$fetch_lake_choice
most_recent_lake_choice()
runApp()
most_recent_lake_choice() != "No selection"
most_recent_lake_choice()
input$fetch_lake_choice
most_recent_lake_choice()
input$fetch_num_bearings
runApp()
most_recent_lake_choice()
runApp()
most_recent_lake_choice()
runApp()
most_recent_lake_choice()
input$fetch_lake_choice
runApp()
most_recent_lake_choice()
most_recent_lake_choice() != "No selection"
most_recent_lake_choice() != input$fetch_lake_choice
runApp()
library(htmlwidgets)
?onRender
runApp()
library(leaflet.extras2)
runApp()
?leaflet.extras2::addArrowhead()
leaflet() %>%
addArrowhead(data = atlStorms2005)
runApp()
arrowhead_icon <- makeIcon(
iconUrl = "data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' fill='blue'><polygon points='50,0 100,100 0,100'/></svg>",
iconWidth = 15, iconHeight = 15
)
runApp()
result_df
st_coordinates(result_df)
st_coordinate(result_df)
st_coordinates(result_df$geometry)
result_df$geometry[1]
result_df$geometry[2]
result_df$geometry[2][1]
coords(result_df$geometry[2])[1,]
st_coordinates(result_df$geometry[2])[1,]
st_coordinates(result_df$geometry)[1,]
st_coordinates(result_df$geometry)
sapply(result_df, function(x) {
st_coordinates(x$geometry)[1,]
})
sapply(result_df$geometry, function(x) {
st_coordinates(x)[1,]
})
lapply(result_df$geometry, function(x) {
st_coordinates(x)[1,]
})
do.call(lapply(result_df$geometry, function(x) {
st_coordinates(x)[1,]
}), rbind)
do.call(rbind, lapply(result_df$geometry, function(x) {
st_coordinates(x)[1,]
}))
endpt_coords = do.call(rbind, lapply(result_df$geometry, function(x) {
st_coordinates(x)[1,]
}))
fetch_pal = colorFactor(c("#777677", "#5b0013"),
domain = c(TRUE, FALSE))
leafletProxy("click2calc_lake") %>%
clearGroup("fetch_lines") %>%
addPolylines(data = result_df$geometry,
group = "fetch_lines",
stroke = T,
opacity = 1,
color = fetch_pal(result_df$is_max),
weight = 3,
label = lapply(paste0("Segment length: ", round(result_df$length, 2), "m<br>",
"Bearing length: ", round(result_df$total.length, 2), "m<br>",
"Longest bearing? ", result_df$is_max), HTML)
) %>%
addMarkers(lng = endpt_coords$X, lat = endpt_coords$Y, icon = arrowhead_icon)
endpt_coords$X,
endpt_coords$X
leafletProxy("click2calc_lake") %>%
clearGroup("fetch_lines") %>%
addPolylines(data = result_df$geometry,
group = "fetch_lines",
stroke = T,
opacity = 1,
color = fetch_pal(result_df$is_max),
weight = 3,
label = lapply(paste0("Segment length: ", round(result_df$length, 2), "m<br>",
"Bearing length: ", round(result_df$total.length, 2), "m<br>",
"Longest bearing? ", result_df$is_max), HTML)
) %>%
addMarkers(lng = endpt_coords[,1], lat = endpt_coords[,2], icon = arrowhead_icon)
runApp()
?addMarkers
runApp()
st_bbox(lake_polys[1,])
runApp()
input$enter2calc_lat
input$enter2calc_lng
pt = st_as_sf(data.frame(lng = input$enter2calc_lng,
lat = input$enter2calc_lat),
coords = c("lng", "lat"),
crs = 4326)
pt
this_lake = lengths(st_intersects(lake_polys[lake_polys$DOW == input$fetch_lake_choice,], pt)) > 0
this_lake == FALSE
enter2calc_df()
data.frame(lat = input$enter2calc_lat,
lng = input$enter2calc_lng,
lake = input$enter_lake_choice)
runApp()
?data.table
library(DT)
runApp()
shiny::runApp()
runApp()
pt_df3 %>%
select(-uniq_id, -bearing_lat, -bearing_lng,
-length, -total.length, -is_max) %>%
distinct(lat, lng, lake, bearing, max_length) %>%
group_by(lat, lng, lake) %>%
mutate(bearing_angles = paste0(bearing, collapse = ", ")) %>%
ungroup() %>%
distinct(lat, lng, lake, bearing_angles, max_length) %>%
rename(
`Point latitude` = lat,
`Point longitude` = lng,
`Lake DOW` = lake,
`Bearing angles` = bearing_angles,
`Point's fetch (m)` = max_length,
) %>%
datatable() %>%
formatStyle(target = "row",
columns = "Fetch segment?",
backgroundColor = styleEqual(
levels = pt_df3$is_max,
values = ifelse(pt_df3$is_max == TRUE, "darkred", "white")
),
color = styleEqual(
levels = pt_df3$is_max,
values = ifelse(pt_df3$is_max == TRUE, "white", "black")
),
fontWeight = styleEqual(
levels = pt_df3$is_max,
values = ifelse(pt_df3$is_max == TRUE, "bold", "normal")
))
pt_df3 %>%
select(-uniq_id, -bearing_lat, -bearing_lng,
-length, -total.length, -is_max) %>%
distinct(lat, lng, lake, bearing, max_length) %>%
group_by(lat, lng, lake) %>%
mutate(bearing_angles = paste0(bearing, collapse = ", ")) %>%
ungroup() %>%
distinct(lat, lng, lake, bearing_angles, max_length) %>%
rename(
`Point latitude` = lat,
`Point longitude` = lng,
`Lake DOW` = lake,
`Bearing angles` = bearing_angles,
`Point's fetch (m)` = max_length,
) %>%
datatable()
pt_df3 %>%
select(-uniq_id, -bearing_lat, -bearing_lng,
-length, -total.length) %>%
filter(is.max == TRUE) %>%
select(-is.max) %>%
distinct(lat, lng, lake, bearing, max_length) %>%
group_by(lat, lng, lake) %>%
mutate(bearing_angles = paste0(bearing, collapse = ", ")) %>%
ungroup() %>%
distinct(lat, lng, lake, bearing_angles, max_length) %>%
rename(
`Point latitude` = lat,
`Point longitude` = lng,
`Lake DOW` = lake,
`Bearing angles` = bearing_angles,
`Point's fetch (m)` = max_length,
) %>%
datatable()
pt_df3 %>%
select(-uniq_id, -bearing_lat, -bearing_lng,
-length, -total.length)
pt_df3 %>%
select(-uniq_id, -bearing_lat, -bearing_lng,
-length, -total.length) %>%
filter(is.max == TRUE)
pt_df3 %>%
select(-uniq_id, -bearing_lat, -bearing_lng,
-length, -total.length) %>%
filter(is_max == TRUE) %>%
select(-is_max) %>%
distinct(lat, lng, lake, bearing, max_length) %>%
group_by(lat, lng, lake) %>%
mutate(bearing_angles = paste0(bearing, collapse = ", ")) %>%
ungroup() %>%
distinct(lat, lng, lake, bearing_angles, max_length) %>%
rename(
`Point latitude` = lat,
`Point longitude` = lng,
`Lake DOW` = lake,
`Bearing angles` = bearing_angles,
`Point's fetch (m)` = max_length,
) %>%
datatable()
runApp()
session$sendCustomMessage(type = "checkAndInsert",
list(elementId = "fetch_second",
shinyInput = "add_element"))
input$add_element
runApp()
isTruthy(input$fetch_method)
input$fetch_method != "No selection"
input$fetch_method == "By entering coordinates"
input$fetch_lake_choice != "No selection"
input$fetch_num_bearings != "No selection"
runApp()
pt = st_as_sf(data.frame(lng = input$enter2calc_lng,
lat = input$enter2calc_lat),
coords = c("lng", "lat"),
crs = 4326)
input$fetch_lake_choice
input$enter2calc_lng
input$enter2calc_lat
this_lake = lengths(st_intersects(lake_polys[lake_polys$DOW == input$fetch_lake_choice,], pt)) > 0
st_intersects(lake_polys[lake_polys$DOW == input$fetch_lake_choice,], pt)
st_bbox(lake_polys[lake_polys$DOW == input$fetch_lake_choice,])
runApp()
input$fetch_method
input$fetch_num_bearings
isTruthy(input$fetch_method) &&
isTruthy(input$fetch_num_bearings) &&
input$fetch_method == "By entering coordinates" &&
input$fetch_num_bearings != "No selection"
runApp()
input$fetch_method
isTruthy(any_non0_bearing())
any_non0_bearing()
runApp()
?fileInput
runApp()
?formatStyle
runApp()
names_check = all(names(df) == c("lat", "lng", "lake"))
all(names(df) == c("lat", "lng", "lake", "lake"))
all(names(df) == c("lat", "lng"))
names_check == TRUE
df$lake[nchar(df$lake) == 7] =
paste0("0", df$lake[nchar(df$lake) == 7]) #REPAIR ANY DOWS
these_lakes = lake_polys[lake_polys$DOW %in% unique(df$lake),]
these_lakes = st_transform(these_lakes, crs = 4326)
lake_pt_inter_check = unlist(lapply(1:nrow(df), function(x) {
lengths(st_intersects(these_lakes[these_lakes$DOW == df$lake[x], ],
st_as_sf(df[x, ], coords = c("lng", "lat"), crs = 4326))) > 0
}))
any(lake_pt_inter_check == FALSE)
runApp()
bearing_lbs = c(seq(from = -11.25, to 168.75, by = 22.5), seq(from = -168.75, to = -33.75, by = 22.5)
bearing_lbs = c(seq(from = -11.25, to 168.75, by = 22.5), seq(from = -168.75, to = -33.75, by = 22.5))
bearing_lbs = c(seq(from = -11.25, to = 168.75, by = 22.5), seq(from = -168.75, to = -33.75, by = 22.5))
bearing_lbs
bearing_ubs = c(seq(from = 123.75, to = 168.75, by = 22.5), seq(from = -168.75, to = -11.25, by = 22.5))
bearing_ubs
bearing_ubs = c(seq(from = 11.25, to = 168.75, by = 22.5), seq(from = -168.75, to = -11.25, by = 22.5))
bearing_ubs
cbind(bearing_lbs, bearing_ubs)
bearing_lbs = c(seq(from = -11.25, to = 168.75, by = 22.5), seq(from = -168.75, to = -33.75, by = 22.5))
bearing_ubs = c(seq(from = 11.25, to = 168.75, by = 22.5), seq(from = -168.75, to = -11.25, by = 22.5))
bearing_dirs = c("N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW")
bearings_trans = data.frame(bearing_lbs, bearing_ubs, bearing_dirs)
bearing_trans = data.frame(bearing_lbs, bearing_ubs, bearing_dirs)
bearing_trans
bearing_trans[9] = c(168.75, 180, "S")
bearing_trans[9,] = c(168.75, 180, "S")
bearing_trans[17,] = c(-180, -168.75, "S")
bearing_trans
runApp()
result_df
result_df$bearing[result_df$is_max == TRUE]
paste0(result_df$bearing[result_df$is_max == TRUE], collapse = ", ")
result_df$bearing[result_df$is_max == TRUE]
winning_bearings = result_df$bearing[result_df$is_max == TRUE]
which(winning_bearings > bearing_trans$bearing_lbs)
which(winning_bearings[1] > bearing_trans$bearing_lbs)
which(winning_bearings[1] > bearing_trans$bearing_lbs &
winning_bearings[2] < bearing_trans$bearing_ubs)
which(winning_bearings[1] < bearing_trans$bearing_lbs &
winning_bearings[2] > bearing_trans$bearing_ubs)
which(winning_bearings[1] > bearing_trans$bearing_lbs &
winning_bearings[1] < bearing_trans$bearing_ubs)
#SO IS NORTH
bearing_trans[1,] = c(-11.25, 0, "N")
bearing_trans[18, ] = c(0, 11.25, "N")
bearing_trans
which(winning_bearings[1] > bearing_trans$bearing_lbs &
winning_bearings[1] < bearing_trans$bearing_ubs)
winning_bearings
winning_bearings[1]
which(winning_bearings[1] > bearing_trans$bearing_lbs &
winning_bearings[1] < bearing_trans$bearing_ubs)
-36 > -11.25
which(bearing_trans$bearing_lbs < winning_bearings[1] &
bearing_trans$bearing_ubs > winning_bearings[1])
bearing_funct = function(bearing) {
bearing_dirs = c("S", "SSE", "SE", "ESE", "E", "ENE", "NE", "NNE", "N", "NNW", "NW", "WNW", "W", "WSW", "SW", "SSW")
if(bearing > 168.75 || bearing <= -168.75) { return("S") } else {
curr = 146.25
for(i in 2:16) {
if(bearing > curr) {return(bearing_dirs[i])}
curr = curr - 22.5
}
bearing_funct(sample(seq(-180, 180, 1), 100))
sample(seq(-180, 180, 1), 100)
bearing_funct(-180)
bearing_funct(-160)
for(i in 1:100) { bearing_funct(sample(seq(-180, 180, 1), 1))}
winning_dirs[1] = bearing_funct(winning_bearings[1])
winning_dirs = character(2)
winning_dirs[1] = bearing_funct(winning_bearings[1])
winning_dirs[2] = bearing_funct(winning_bearings[2])
paste0(result_df$bearing[result_df$is_max == TRUE], collapse = ", ")
result_df = result_df %>%
mutate(dir = bearing_funct(bearing))
result_df = result_df %>%
rowwise() %>%
mutate(dir = bearing_funct(bearing))
str(result_df)
result_df = result_df %>%
rowwise() %>%
mutate(dir = bearing_funct(bearing)) %>%
ungroup()
result_df
result_df = result_df %>%
rowwise() %>%
mutate(dir = bearing_funct(bearing)) %>%
ungroup() %>%
mutate(bearing_dir = paste0(bearing, " (", dir, ")", collapse = ""))
result_df
result_df = result_df %>%
rowwise() %>%
mutate(dir = bearing_funct(bearing)) %>%
mutate(bearing_dir = paste0(bearing, " (", dir, ")", collapse = "")) %>%
ungroup()
result_df
runApp()
isTruthy(input$fetch_method)
input$fetch_method != "No selection"
input$fetch_method == "By clicking a map"
most_recent_bearing_num() == "No selection"
runApp()
isTruthy(input$fetch_num_bearings) &&
input$fetch_num_bearings != "No selection"
isTruthy(input$fetch_method) &&
input$fetch_method != "By entering coordinates"
isTruthy(input$fetch_method) &&
isTruthy(input$fetch_num_bearings) &&
input$fetch_method == "By entering coordinates" &&
input$fetch_num_bearings == "No selection"
input$fetch_num_bearings
isTruthy(input$fetch_num_bearings) &&
input$fetch_num_bearings != "No selection"
isTruthy(input$fetch_method) &&
input$fetch_method != "No selection" &&
input$fetch_method == "By clicking a map" &&
most_recent_bearing_num() == "No selection"
isTruthy(input$fetch_method) &&
input$fetch_method == "By clicking a map"
isTruthy(input$fetch_method) &&
input$fetch_method != "No selection" &&
input$fetch_method == "By entering coordinates" &&
input$fetch_lake_choice != "No selection" &&
input$fetch_num_bearings != "No selection" &&
nrow(enter2calc_df()) == 0 &&
first_enter_fourth() == TRUE
first_enter_fourth() == FALSE
isTruthy(input$fetch_method) &&
input$fetch_method != "No selection" &&
input$fetch_method == "By uploading a CSV file"
isTruthy(input$fetch_method) &&
isTruthy(input$fetch_num_bearings) &&
input$fetch_method == "By entering coordinates" &&
input$fetch_num_bearings != "No selection"
runApp()
prev_enter_df_nrows()
runApp()
prev_enter_df_nrows()
isTruthy(prev_enter_df_nrows())
isTruthy(prev_enter_df_nrows()) &&
prev_enter_df_nrows() > 1 &&
nrow(enter2calc_df()) == 1
runApp()
isTruthy(input$fetch_method)
input$fetch_method != "No selection"
input$fetch_method == "By entering coordinates"
input$fetch_lake_choice != "No selection"
input$fetch_num_bearings != "No selection"
nrow(enter2calc_df()) == 0
first_enter_fourth() == TRUE
runApp()
isTruthy(input$fetch_method)
input$fetch_method != "No selection"
input$fetch_method == "By entering coordinates"
input$fetch_lake_choice != "No selection"
input$fetch_num_bearings != "No selection"
nrow(enter2calc_df()) == 0
first_enter_fourth() == TRUE
runApp()
first_move2submit()
runApp()
first_move2submit()
runApp()
?selectInput
runApp()
source("H:/Shared drives/MAISRC/Quantification, Data, and Computation/Resources/LakeEffects/oldui.R", echo=TRUE)
runApp()
